#!/usr/bin/python

# https://projecteuler.net/problem=2
# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.

def getFibBelowN(N):
    '''
    Given an integer N, returns a list containing all Fibonacci numbers less
    than N.
    '''
    result = []
    i = 0
    while True:
        num = fib(i)
        if num > N: break
        if num % 2 == 0:
            result.append(num)
        i += 1
    return result


def fib(N):
    '''
    Given an integer N, returns the Nth Fibonacci number.
    '''
    # create a cache dictionary with the two fibonacci base cases
    cache = {}
    cache[0] = 0
    cache[1] = 1

    # call the helper function with the cache dictionary
    return fib_helper(N, cache)


def fib_helper(N, cache):
    # if the answer for N is already cached, return it
    if N in cache.keys(): return cache[N]

    # otherwise calculate it, cache it, and return it
    result = fib_helper(N-1, cache) + fib_helper(N-2, cache)
    cache[N] = result
    return result

if __name__ == '__main__':
    print sum(getFibBelowN(4000000))